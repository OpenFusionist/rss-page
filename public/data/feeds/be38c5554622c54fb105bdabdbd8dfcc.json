[{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"32 位 handle 的一种生成方法","link":"https://blog.codingnow.com/2024/08/handle_generation.html","author":"云风","rawPubDate":"2024-08-18T07:44:13.000Z","timestamp":1723967053,"summary":"我倾向于在 C 程序里使用整数 handle ，而不是指针。尤其是需要做弱引用的时候。 我认为，一个好的 handle 生成算法，应该满足： 即使 handle 被销毁了，它这个数字也应该被保留，不应该被新的 handle 复用。posix api 里的文件 id 就不符合这一点。 提供一个 api 可以判断一个 handle 是否有效，其时间复杂度为 O(1) 。 从 handle 对应为对象的内存地址的时间复杂度应该为 O(1) ，不应该比指针有明显的性能问题。虽然 hash 表理论上可以满足 O(1) 的时间复杂度，但在糟糕的场景（hash 碰撞发生时）并不能保证这一点。 构造 handle 时间复杂度也为 O(1) 。 handle..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"基地建设（工厂）类游戏的玩家体验","link":"https://blog.codingnow.com/2024/08/base_building_game.html","author":"云风","rawPubDate":"2024-08-13T13:14:40.000Z","timestamp":1723554880,"summary":"这两天思考了一下，基于工厂生产的基地建设类游戏给玩家提供的核心体验到底是什么？以及，我们去年被取消的游戏到底还差点什么。接下来我要制作的游戏的注重点应该在哪里。 我玩的时间比较长的两个基地建设类游戏：异星工厂和缺氧，它们的玩法其实差异很大，但却给人一些近似的体验。对于这个问题，我想过很多次，得出的结论是，它们的确有一些共通之处： 玩家在玩这两个游戏时的情感体验过程非常类似，大致是这样的：..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"gameplay 框架设计总结","link":"https://blog.codingnow.com/2024/08/gameplay_framework.html","author":"云风","rawPubDate":"2024-08-08T05:57:48.000Z","timestamp":1723096668,"summary":"游戏行业从业 20 多年，一直在做底层开发，即使是帮助其他团队写上层游戏逻辑，也都是实现某些特定的功能模块。直到最近，我想单独开发游戏，才好好想想架子该怎么搭。 从最初的原始 demo 开始，由于缺乏经验，写着写着经常有失控的感觉。好在一个人做，重构的心理负担不大。想改的时候，停下来花上两三天全部重写也不太所谓。最近总算顺畅了一点，感觉需要整理一下思路，所以写一篇 blog 记录一下。 任何复杂的软件问题，都可以通过拆分为若干子问题减少复杂度。 我认为，游戏的上层逻辑，即 gameplay 部分，主要分为三块：数据模型、外在表现和人机交互。 “数据模型”是 gameplay 的核心部分，即把游戏的画面等外在表现以及图形界面、操作控制（鼠标键盘控制器等）等剥离后的东西。如何判断一个模块是否属于数据模型，是否有不属于它的部分没有拆分出去，最简单的方法是看它是否有直接调用游戏引擎的代码。拆分干净后，这块不应该包含任何与图形、界面、时钟、控制输入有关的接口。除了一些必要的文件 IO 接口（主要是用来读取 gameplay 相关的策划数据，写 log ，做数据持久化等），也不应该涉及任何 OS 的 API 。 这样，我们就可以方便的对它进行整体或局部的测试。必要时还可以更换游戏引擎，甚至从文本 roguelike 换到 3D 表现都不会受影响。 “外在表现”当然是指游戏的画面表现、声音声效等等，通常这由游戏引擎实现，但还会有大量的代码存在于 gameplay 的实现中。这一块代码也会维护大量的状态，但不会涉及数据持久化。简单的判断方法是：如果游戏保存进度时，所有这里的所有状态都可以舍弃，下次读取进度后，这些状态又能被重建，而玩家不会感觉丢失了任何数据。 “人机交互”是游戏软件必要的部分，如果没有“人”的存在，游戏也就没有意义了。这块分为两个部分：图形界面用于展示游戏的数据给人看，同时接收一些来至界面的间接输入；控制器（包括并不限于手柄鼠标键盘触摸屏等）对游戏的直接控制。 对于联网游戏，还应包括第四大块：“网络输入”。这篇 blog 仅讨论非联网游戏。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"工人任务分配系统","link":"https://blog.codingnow.com/2024/07/task_system.html","author":"云风","rawPubDate":"2024-07-25T07:49:47.000Z","timestamp":1721893787,"summary":"在矮人要塞 like 的游戏中，都有一套基于工人的任务分发系统。玩家通常不能像 RTS 中那样直接操作工人去工作，而是对要做的事情下达任务，等着工人自主去完成。 由于任务数量通常远多于工人数量，这个任务分发系统中大多配有优先级设置，可以让诸多任务有条不紊的进行。调整优先级变成玩家主动操控的渠道。初玩这类游戏，会有点不习惯：感觉难以在微观层面直接做自己像做的事情。像捡块石头放进指定仓库这件事，无法像玩 RTS 游戏那样，先点选工人，再针对石头发出拾取指令…… 但习惯之后，恐怕又回不去了。比如我在玩 Ratopia 时，就对操控鼠王直接干活烦躁不已。 这类游戏，我玩的时间比较长的有三个，按时长排序为：缺氧 (ONI) 、边缘世界 (Rimworld)、矮人要塞 (DF)。其它如 Songs of Syx 、Prison Architect 等很多也有所涉猎。其实，这些游戏在设计工人任务系统的细节上也有所不同。 以我游戏时长最长的缺氧和边缘世界相比较，同样是提供玩家主动操控的能力：Rimworld 可以给工人的任务队列直接下达指令（这更接近 RTS 的玩法），而 ONI 则是通过给单个任务本身排优先级实现的。ONI 设计了警报级任务，可以越过一切优先级设定，强制立刻完成。虽然 ONI 也保留了指挥单个小人移动到指定位置，但实际游戏中几乎没什么用。 对于拾取物品，Rimworld 可以封禁、解禁单个物品，而 ONI 没有这个设计。ONI 的工人几乎不会主动把地上的东西搬入仓库，除非下达清扫指令。 这些细节的不同，可能来源于作者设计时的思维轨迹，很大程度上也取决于游戏的其他玩法。例如 Rimworld 偏重手控成分很重的战斗，而 ONI..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"飞船建设部分的设计草案","link":"https://blog.codingnow.com/2024/07/building_system.html","author":"云风","rawPubDate":"2024-07-16T08:35:58.000Z","timestamp":1721118958,"summary":"像异星工厂、缺氧、边缘世界都有大量的 mod 。可以通过大改游戏机制，把本体游戏改造成完全体验不同的游戏。这些好玩的 mod 几乎都是一个人完成的。所以我觉得，固然游戏的外层玩法决定了整体体验，但其实开发的总工作量并不大。而且，一旦玩法不满意，也容易修改。 我的游戏开发计划是先完成一些底层基础系统，再考虑完整游戏的全貌。没有上层玩法支撑，光有底层系统玩起来一定寡淡无味，但我认为它们是设计和开发中最重要的一环。 在进一步实现 demo 之前，我设计了一下飞船的建造系统。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"室内空气流动模拟","link":"https://blog.codingnow.com/2024/07/air_flow_simulation.html","author":"云风","rawPubDate":"2024-07-10T02:50:27.000Z","timestamp":1720579827,"summary":"在设计飞船建造的游戏时，我想做一个空气流动的模拟系统。这里有一个初步的方案，不知道好不好，先记录一下： 空间是由二维的正方形格子构成的，有些格子如墙体会阻止空气流动。每个格子有温度属性及气体质量的记录。不同气体可以同时存在于同一个内，质量单独记录。温度传导系统另外设计。 每个游戏 tick 对每个格子做一次独立计算，根据温度值给出一个概率，这个概率决定了该格气体向周围扩展的比例。 温度越高，越可能将更大比例的气体平均扩散到最多邻接的 8 格空间。 当格子因为建墙而导致空间变化时，把该格内气体全部扩散到临接格，当极端情况下无法做到时，空气锁定在墙体内，不会消失，等待以后满足条件后再扩散出去。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"角色动画系统","link":"https://blog.codingnow.com/2024/07/avatar_animation.html","author":"云风","rawPubDate":"2024-07-02T06:38:37.000Z","timestamp":1719902317,"summary":"Ant 引擎的角色动画系统还需要完善。 之前我们用 Ant 引擎开发的游戏以机械装置为主，所以并不需要人型角色动画。对于人物角色动作的动画控制，最好有更多的引擎支持。 通常，角色逻辑上的属性和动画表现存在一个映射关系。一个角色，它逻辑上的基本属性可能只有在空间中的坐标。我们编写代码控制它时，只关心它在哪里。但是，在做画面表现时，则需要根据空间坐标这组简单属性，转换为动画播放：如果角色静止不动，就播放 idle 动画，如果正在运动，就播放 walk 动画。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"一些星舰或太空站建设类游戏","link":"https://blog.codingnow.com/2024/06/starship_gamelist.html","author":"云风","rawPubDate":"2024-06-22T08:39:52.000Z","timestamp":1719045592,"summary":"因为玩了一些星舰或太空站建造类的游戏，找找灵感。每个游戏都能给我一些启发，因为玩的都不多，所以就不评价了，只做个列表记录。有些还没有出，先加了个愿望单。 Adaptory Astro Colony Avorion Cosmoteer Deep Space Outpost Facteroids Factorio mod : Space Exploration Factorio mod : Warp Drive Machine Far Sector Generation Nova Generation Ship IXION Ostranauts Oxygen Not Included DLC: Spaced Out Rimworld mod : Save Our..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"监视 Lua 对象的修改","link":"https://blog.codingnow.com/2024/06/lua_object_monitor.html","author":"云风","rawPubDate":"2024-06-11T02:12:07.000Z","timestamp":1718071927,"summary":"我正在制作的游戏 demo 中，所有对象逻辑上都存在于二维空间，但在 Ant Engine 中通过 3d 渲染方式绘制出来。 我希望有一组简便的 API 方便我控制这些对象的渲染，只是控制它们的位置以及在 Y 轴上的旋转量。Ant Engine 是用场景组件来控制 entity 渲染时的空间状态，但场景节点使用的是 3d 空间的 SRT 即缩放、旋转、位移。而我只需要控制其中的两个坐标轴上的空间位置以及一个旋转轴上的旋转量，直接修改 SRT 太不方便了。而且，使用引擎时，还需要每帧标记被修改过的场景组件对应的 entity ，这也很麻烦。 在 ECS 结构下，最简单的方式是为这些 entity 创建一个额外的组件，里面有 x y r 三个值。通过一个 system 把它们转换到场景节点在 3d 空间下的 SRT 组件中。但如果每帧都全部转换一次显得多余，毕竟大部分..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"一个游戏的点子","link":"https://blog.codingnow.com/2024/06/game_idea.html","author":"云风","rawPubDate":"2024-06-07T04:53:51.000Z","timestamp":1717736031,"summary":"宅在家里一个月了。一直在想，如果不考虑迎合市场，不顾及销量，到底应该做一个怎样的游戏才能让自己在制作过程中得到满足。 过年前曾经参加过一次老同事聚餐。组织者说，这屋子坐的都是做游戏的老人了，程序、策划、美术全齐了，还都是不差钱的主。大家要不要凑个局，想想做个啥游戏出来？接下来是一阵沉默，直到有声音说，“我没什么想法”，饭桌上的人纷纷点头，转移了话题。 前段参加一个独立游戏活动，见了些老朋友。有位同学做游戏很多年了，说起这些年的经历，入行头几年是给老板打工，接下来开了家小公司自己做，没赔钱也没赚钱。但干下来感觉变成了给员工打工。为了可以持续发出工资，每次立项都很匆忙，结果还是在不喜欢的游戏项目上耗掉了太多时间。现在干脆把团队安顿好，一个人出来，好好想想到底要做什么。 可见，想清楚做什么很难。单独一人的状态也很难得，没有太多的外界干扰，不为了做事而做，可以慢慢来。 首先，我想做一款游戏，这毋庸置疑。玩游戏是我这些年最大的爱好。光在 steam 上这些年就花掉了上万小时，switch 上也有几千小时。我能在制作游戏的过程中获得我要的东西。 其次，做一款游戏的目的不是为了收入。我对物质生活要求极低，不需要花钱满足欲望。除非需要雇人一起做游戏，不然制作游戏的开销只是自己家庭的日常开销，而我这些年的积蓄已够过完余生。我喜欢的游戏都不需要太复杂的美术资产，这方面并不需要额外的投入。 另一方面，我也不需要用游戏讨好玩家来获得成就感，不需要用一个产品来证明自己，这些成就感的体验都已有过，不是我想追求的东西。 所以，我所需要的是制作过程带来的持续体验，让自己觉得自己在做一件有意义的事。我所喜欢和擅长的其实是：认清问题，解决它们。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"Ant 的资源内存管理","link":"https://blog.codingnow.com/2024/06/asset_mgr_rework.html","author":"云风","rawPubDate":"2024-06-04T07:53:11.000Z","timestamp":1717487591,"summary":"这两天着手做游戏 demo 时发现 Ant 的 Asset 管理模块之前还留有一些工作没有完成。 那就是，当游戏程序加载 Asset 后，资源管理模块何时释放它们的问题。在 ant.asset 模块中，我们为每种 asset （以文件后缀名区分）定义了 loader unloader reloader 三个接口，分别处理加载、卸载、重载的工作。 但在实际实现时，几乎都没有实现 unloader 。当时是偷懒，因为我们之前的游戏即使把全部资源都加载到内存，也没多少数据，并不需要动态卸载释放内存。而即使实现了 unloader ，管理器也没有实现很好的策略去调用它。只能靠用户主动调用卸载 api 。事实上，一个个资源文件主动卸载也不实用。 考虑到占用内存最大的 asset 是贴图，我们又对贴图做了一些特殊处理： 所有的贴图都可以用一张空白贴图作为替代。引擎有权在任何时候（通常是内存不足时）主动释放长期未使用的贴图，并换用替代。这个特性也可以很好的适配异步加载过程。 所以，未释放的贴图并不会撑满内存。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"重新启程","link":"https://blog.codingnow.com/2024/05/farewell.html","author":"云风","rawPubDate":"2024-05-06T01:51:56.000Z","timestamp":1714960316,"summary":"今天，是我在广州阿里中心办公的最后一天。虽然 Last day 设定在了 5 月 20 日，但后面全部是假期，应该不会再回来这里。这些年的年假我都没有用过，总是到年底自动作废，今年算是休全（一小半）了。 回顾我的职业生涯，2001 年之前在北京经历了创业，而后又短暂的工作了数月。之后便在网易工作了十年 ，直到 2011 年离开 。2011 年底，我们创办了简悦，原本以为会把这家公司一直开下去，但在各种机缘下，于 2017 年底被阿里巴巴收购。之后，我便退出公司的管理，专心开发游戏引擎。 每段经历，印证着不同的心境。幸运的是，每次开始和结束，都是我的自主选择。感谢那些容忍着我的任性的伙伴，而我执着于自己想法的同时，也回报了周遭的人。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"大批量动画模型的优化","link":"https://blog.codingnow.com/2024/05/skinmesh_instancing.html","author":"云风","rawPubDate":"2024-05-03T07:03:58.000Z","timestamp":1714719838,"summary":"最近和公司一个开发团队探讨了一下他们正在开发的游戏中遇到的性能问题，看看应该如何优化。这个游戏的战斗场景想模仿亿万僵尸(They are billions）的场景。在亿万僵尸中，场景中描绘了上万的僵尸潮，但我们这个游戏，超过 500 个僵尸就遇到了性能问题。固然，手机的硬件性能比不上 PC ，但 500 这个数量级还是略低于预期。 对于游戏中大量类似的动画物体，肯定有方法可以优化。我们来看看渲染这些动画可行的优化方向： 常见的方式是把僵尸先预渲染成图片，而动画自然就是多个图片帧。对于亿万僵尸这个游戏来说，它本身就是基于 2D 渲染引擎的，这么做无可厚非。..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"死亡","link":"https://blog.codingnow.com/2024/04/death.html","author":"云风","rawPubDate":"2024-04-17T02:17:02.000Z","timestamp":1713320222,"summary":"早上上班的路上，在必经的一条马路，看到一个蓝衣人趴在路中间隔离带的水泥桩上。车流比较大，一晃就开过去了。我问坐在副驾驶的老婆：刚才那个人好奇怪啊。她说是啊，那个人怎么了？我说，昨天你没看到吗？他保持那个姿势已经一整天了，感觉连手指头都没动过。 说到这里，我赶紧把车靠边停下来打了 110 ，附近的派出所联系了我，说马上派人过去看看。我的心情久久不能平静。走在路上，我喜欢观察四周的细节，其实昨天就感觉不对了。路上没有血迹，我以为他/她（看不到脸）是在翻越隔离带时身体不舒服想休息一下。但一个人保持那种姿势几分钟而不动肯定不正常。如果昨天这个时候就报警或许更好呢？..."},{"feedUrl":"https://blog.codingnow.com/atom.xml","feedTitle":"云风的 BLOG","title":"Ant Engine 的一些优化","link":"https://blog.codingnow.com/2024/04/ant_engine_optimization.html","author":"云风","rawPubDate":"2024-04-12T05:08:41.000Z","timestamp":1712898521,"summary":"最近一段时间都在公司内寻找项目可以合作推进 Ant Engine 的使用。我觉得自研引擎的一个重要优势在于我们可以针对具体游戏更好的做性能优化。在目标设备硬件性能允许的范畴内，把画面质量和交互体验做到更好。而同样的优化手段，在通用商业引擎上面做会困难的多，甚至无法顺利完成。 我们用 Ant Engine 制作的第一款游戏 Red Frontier 在一年前是性能完全不达标的。它在 iPhone 8 上甚至都达不到 30fps ，无法流畅游戏。很多性能问题是已知问题，比如我们用 Lua 搭建了整个引擎，一开始只考虑了引擎结构和正确性，把性能搁置在一边待后面再处理。 优化方案是一开始就想好的：借助 lua ecs 框架，把数据结构放在 C 内存中，必要时可以绕过 Lua 代码，直接用 C 代码控制核心数据。我们花了大约 3 个多月的时间将核心渲染系统用 C 重写后，就把性能提高了 1 个数量级以上。这个过程可以说是一直掌握在手中，按计划推进。 但即使可以让游戏运行在 60fps 下，优化的目标也远远没有达到。这是因为对于手机设备来说，用户更容易产生电量焦虑。在固定座位上插着电玩主机或 PC 游戏，玩家不会去想游戏机耗了多少电；即使把 switch..."}]